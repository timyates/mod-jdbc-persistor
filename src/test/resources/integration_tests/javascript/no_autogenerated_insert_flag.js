/*
 * Copyright 2012-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var container  = require( "vertx/container" ) ;
var eb         = require( "vertx/event_bus" ) ;
var vertx      = require( "vertx" ) ;
var vertxTests = require( "vertx_tests" ) ;
var vassert    = require( "vertx_assert" ) ;

var script = this ;
var persistorConfig = { address: 'test.persistor', url: 'jdbc:hsqldb:mem:testdb?shutdown=true', ignoreAutoGeneratedKeys:true }
var readyAddress = persistorConfig.address + '.ready'

var readyHandler = function(msg) {
    if(msg.status === 'ok') {
        eb.unregisterHandler(readyAddress, readyHandler);
        vertxTests.startTests(script);
    }
};

// This will get called by the jdbc-persistor when it's running
eb.registerHandler(readyAddress, readyHandler);

container.deployModule(java.lang.System.getProperty('vertx.modulename'), persistorConfig, 1, function(err, deployID) {
    if (err != null) {
        err.printStackTrace();
    }
});

function checkStatus() {
    eb.send( 'test.persistor', {action: 'pool-status'}, function(reply) {
        vassert.assertEquals(reply.status, 'ok');
        vassert.assertEquals(reply.connections, reply.idle, 0 );
        vassert.assertEquals(reply.orphans, 0, 0);
        vassert.testComplete();
    });
}

function initTableWithTimestamp(handler) {
    eb.send( 'test.persistor', {
        action: 'execute',
        stmt:   'CREATE TABLE IF NOT EXISTS testnogentime ( id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, time TIMESTAMP, CONSTRAINT testnogentimeid PRIMARY KEY ( id ) )'
    }, function(reply) {
        eb.send( 'test.persistor', {
            action: 'execute',
            stmt:   'TRUNCATE TABLE testnogentime'
        }, function(reply) {
            handler(reply) ;
        });
    });
}

function testInsertWithoutAutoGeneratedKeys() {
    initTableWithTimestamp(function() {
        eb.send('test.persistor', {
            action: 'insert',
            stmt:  'INSERT INTO testnogentime( time ) VALUES ( ? )',
            values: [ [ '2013-02-14 12:30:44' ],
                      [ '2013-02-15 12:00:00' ],
                      [ '2013-02-16 11:00:00' ] ]
        }, function(reply) {
            vassert.assertEquals(reply.status, 'ok');
            vassert.assertEquals(undefined, reply.result);
            vassert.assertEquals(reply.updated, 3, 0);
            eb.send('test.persistor', {
                action: 'select',
                stmt:   "SELECT id, TO_CHAR( time, 'YYYY-MM-DD HH24:MI:SS' ) AS TIME FROM testnogentime ORDER BY ID ASC"
            }, function(reply) {
                vassert.assertEquals(reply.status, 'ok');
                vassert.assertEquals(reply.result.length, 3, 0);
                vassert.assertEquals(reply.result[ 0 ].TIME, '2013-02-14 12:30:44');
                vassert.assertEquals(reply.result[ 1 ].TIME, '2013-02-15 12:00:00');
                vassert.assertEquals(reply.result[ 2 ].TIME, '2013-02-16 11:00:00');
                checkStatus();
            });
        });
    });
}
